/**
 *
 * $Id$
 */
package eu.cloudwave.ude.fcore.FCORE.validation;

import eu.cloudwave.ude.fcore.FCORE.Attribute;
import eu.cloudwave.ude.fcore.FCORE.AttributeConstraint;
import eu.cloudwave.ude.fcore.FCORE.AttributeConstraintConnection;
import eu.cloudwave.ude.fcore.FCORE.ExcludesFeatureConstraint;
import eu.cloudwave.ude.fcore.FCORE.FeatureConstraint;
import eu.cloudwave.ude.fcore.FCORE.FeatureGroup;
import eu.cloudwave.ude.fcore.FCORE.FeatureToGroupConnection;
import eu.cloudwave.ude.fcore.FCORE.GroupFeature;
import eu.cloudwave.ude.fcore.FCORE.GroupToFeatureConnection;
import eu.cloudwave.ude.fcore.FCORE.InfluenceAttribute;
import eu.cloudwave.ude.fcore.FCORE.InfluenceFeature;
import eu.cloudwave.ude.fcore.FCORE.MandatoryConnection;
import eu.cloudwave.ude.fcore.FCORE.OptionalConnection;
import eu.cloudwave.ude.fcore.FCORE.RequiresFeatureConstraint;
import eu.cloudwave.ude.fcore.FCORE.RootFeature;
import eu.cloudwave.ude.fcore.FCORE.Softgoal;

import eu.cloudwave.ude.fcore.FCORE.SolitaryFeature;
import org.eclipse.emf.common.util.EList;

/**
 * A sample validator interface for {@link eu.cloudwave.ude.fcore.FCORE.FeatureModel}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface FeatureModelValidator {
    boolean validate();

    boolean validateRootFeature(RootFeature value);
    boolean validateGroupFeatures(EList<GroupFeature> value);

    boolean validateSolitaryFeatures(EList<SolitaryFeature> value);

    boolean validateFeatureGroups(EList<FeatureGroup> value);

    boolean validateAttributes(EList<Attribute> value);

    boolean validateAttributeConstraints(EList<AttributeConstraint> value);

    boolean validateRequiresFeatureConstraints(EList<RequiresFeatureConstraint> value);

    boolean validateExcludesFeatureConstraints(EList<ExcludesFeatureConstraint> value);

    boolean validateFeatureConstraints(EList<FeatureConstraint> value);
    boolean validateSoftgoals(EList<Softgoal> value);

    boolean validateFeatureInfluences(EList<InfluenceFeature> value);

    boolean validateAttributeInfluences(EList<InfluenceAttribute> value);

    boolean validateMandatoryConnections(EList<MandatoryConnection> value);

    boolean validateOptionalConnections(EList<OptionalConnection> value);

    boolean validateFeatureToGroupConnections(EList<FeatureToGroupConnection> value);

    boolean validateGroupToFeatureConnections(EList<GroupToFeatureConnection> value);

    boolean validateAttributeConstraintConnections(EList<AttributeConstraintConnection> value);
}
